import json
from hashlib import md5
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.inline.products_from_cart import product_markup, product_cb
from aiogram.utils.callback_data import CallbackData
from keyboards.default.markups import *
from aiogram.types.chat import ChatActions
from states import CheckoutState, NewPostState, KunaState, SpentBonusState
from loader import dp, db, bot
from filters import IsUser
from .menu import cart
from bit.network import currency_to_satoshi, satoshi_to_currency
from bit.network import get_fee
from wallets.wallet import wallet_key, get_address_balance, get_address, send_btc, check_payment
from handlers.user.menu import user_menu
from wallets.kuna_wallet import check_kuna_code, activate_code, check_payment_code

global total_price

pay_markup = ReplyKeyboardMarkup()
pay_markup.add('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É')
pay_markup.add(back_message)


@dp.message_handler(IsUser(), text=cart)
async def process_cart(message: Message, state: FSMContext):
    cart_data = db.fetchall('SELECT * FROM cart WHERE cid=?', (message.chat.id,))

    if len(cart_data) == 0:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
    else:
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        async with state.proxy() as data:
            data['products'] = {}
        order_cost = 0

        for _, idx, count_in_cart, _, in cart_data:
            product = db.fetchone('SELECT * FROM products WHERE idx=?', (idx,))

            if product is None:
                db.query('DELETE FROM cart WHERE idx=?', (idx,))
            else:
                _, title, body, image, price, amount, _ = product
                order_cost += price

                async with state.proxy() as data:
                    data['products'][idx] = [title, price, count_in_cart, amount]

                markup = product_markup(idx, count_in_cart)
                text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {order_cost}$'

                await message.answer_photo(photo=image, caption=text, reply_markup=markup)

        if order_cost != 0:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add('üì¶ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑')
            markup.add('üíé –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã')
            markup.add(back_message)

            await message.answer('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ?', reply_markup=markup)


@dp.message_handler(IsUser(), text=back_message)
async def cart_back(message: Message):
    if message.text == back_message:
        await user_menu(message)


@dp.message_handler(IsUser(), text='üì¶ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑')
async def pay_order_process(message: Message):

    payment_markup = ReplyKeyboardMarkup()
    payment_markup.add('üåê Bitcoin', 'üì© KUNA Code')
    payment_markup.add(back_message)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.', reply_markup=payment_markup)
    await CheckoutState.payment_status.set()


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.payment_status)
async def payment_pick_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await state.finish()
        await process_cart(message, state)


@dp.message_handler(IsUser(), text='üíé –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã')
async def use_bonus_process(message: Message, state: FSMContext):
    bonus_markup = ReplyKeyboardMarkup()
    bonus_markup.add('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –±–æ–Ω—É—Å—ã')
    bonus_markup.add(back_message)

    cid = message.from_user.id
    if db.fetchone('SELECT bonus FROM referral WHERE cid=?', (cid,)) is None:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
        await process_cart(message, state)
    else:
        async with state.proxy() as data:
            data['total_price'] = {}

        bonus = db.fetchone('SELECT bonus FROM referral WHERE cid=?', (cid,))[0]

        if bonus < 10:
            await message.answer(f'''–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!
–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: <b>{round(bonus, 2)}$</b>
–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <b>10$</b>''', reply_markup=back_markup())
        else:
            await message.answer(f'''–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: <b>{round(bonus, 2)}$</b>
''', reply_markup=bonus_markup)

            await SpentBonusState.total_cost.set()


@dp.message_handler(IsUser(), text=back_message, state=SpentBonusState.total_cost)
async def bonus_back_menu(message: Message, state: FSMContext):
    if message.text == back_message:
        await state.finish()
        await use_bonus_process(message, state)


@dp.message_handler(IsUser(), text='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –±–æ–Ω—É—Å—ã', state=SpentBonusState.total_cost)
async def use_all_bonus_process(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if 'products' in data.keys():
            cid = message.from_user.id
            answer = ''
            total_price = 0

            for title, price, count_in_cart, _ in data['products'].values():
                tp = count_in_cart * price
                answer += f'<b>{title}</b> * {count_in_cart} —à—Ç. = <b>{tp}$</b>'
                total_price += tp
                bonus = db.fetchone('SELECT bonus FROM referral WHERE cid=?', (cid,))[0]

                if bonus >= total_price:
                    total_bonus_cost = total_price - 30
                    total_cost = 30
                    current_bonus = bonus - total_bonus_cost
                else:
                    if bonus <= 30:
                        total_cost = total_price - bonus
                        current_bonus = 0
                    else:
                        total_bonus_cost = total_price - 30
                        if bonus >= total_bonus_cost:
                            total_cost = 30
                            current_bonus = bonus - total_bonus_cost
                        else:
                            total_cost = (total_bonus_cost - bonus) + 30

                if 'total_price' in data.keys():
                    data['total_price'][cid] = [total_price, bonus, answer, current_bonus, total_cost, total_bonus_cost]

            if total_price < 30:
                await message.answer('üö´ –°—É–º–º–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π!', reply_markup=back_markup())

            if (total_price - int(bonus)) < 30:
                await message.answer(f'''–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ —Å–≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (<b>30$</b>)!
–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: <b>{round(bonus, 2)}$</b>
–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–æ–Ω—É—Å–∞–º–∏: <b>{total_price - 30}$</b>''', reply_markup=submit_markup())
            await SpentBonusState.bonus.set()


@dp.message_handler(IsUser(), text=cancel_message, state=SpentBonusState.bonus)
async def use_all_bonus_invalid(message: Message, state: FSMContext):
    await SpentBonusState.total_cost.set()
    await use_bonus_process(message, state)


@dp.message_handler(IsUser(), text=all_right_message, state=SpentBonusState.bonus)
async def use_all_bonus_confirm(message: Message, state: FSMContext):
    cid = message.from_user.id
    async with state.proxy() as data:
        for total_price, bonus, answer, current_bonus, total_cost, total_bonus_cost in data['total_price'].values():
            answer += f'–°–æ —Å–∫–∏–¥–∫–æ–π <b>{total_bonus_cost - bonus}$</b>, –≤—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_cost}$</b>'
            db.query('UPDATE referral SET bonus=? WHERE cid=?', (current_bonus, cid))

            await message.answer('–ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã!')
            await pay_order_process(message)


@dp.callback_query_handler(IsUser(), product_cb.filter(action='count'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='increase'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='decrease'))
async def product_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):
    idx = callback_data['id']
    action = callback_data['action']

    if 'count' == action:
        async with state.proxy() as data:

            if 'products' not in data.keys():
                await process_cart(query.message, state)

            else:
                await query.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - ' + str(data['products'][idx][2]))

    else:
        async with state.proxy() as data:

            if 'products' not in data.keys():
                await process_cart(query.message, state)

            elif data['products'][idx][3] <= data['products'][idx][2]:
                data['products'][idx][2] += 0 if 'increase' == action else -1
                count_in_cart = data['products'][idx][2]

                await query.answer('–¢–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!')

            else:
                data['products'][idx][2] += 1 if 'increase' == action else -1
                count_in_cart = data['products'][idx][2]

                if count_in_cart == 0:
                    db.query('''DELETE FROM cart  WHERE cid = ? AND idx = ?''', (query.message.chat.id, idx))

                    await query.message.delete()
                    await cart_back(query.message)

                else:
                    db.query('''UPDATE cart SET quantity = ? WHERE cid = ? AND idx = ?''',
                             (count_in_cart, query.message.chat.id, idx))
                    await query.message.edit_reply_markup(product_markup(idx, count_in_cart))


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.payment_status)
async def payment_pick_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await state.finish()
        await process_cart(message, state)


# BITCOIN –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´ #


@dp.message_handler(IsUser(), text='üåê Bitcoin', state=CheckoutState.payment_status)
async def btc_payment(message: Message, state: FSMContext):
    async with state.proxy() as data:
        fee = get_fee(fast=False)
        btc_fee = satoshi_to_currency(fee, 'btc')
        address = await wallet_key()
        cid = message.chat.id
        if data.get('total_price') is None:
            if 'products' in data.keys():
                answer = ''
                total_price = 0

                for title, price, count_in_cart, _ in data['products'].values():
                    tp = count_in_cart * price
                    answer += f'<b>{title}</b> * {count_in_cart} —à—Ç. = <b>{tp}$</b>'
                    total_price += tp

                total_cost = total_price
        else:
            total_cost = data['total_price'][cid][4]
            answer = data['total_price'][cid][2]

        data['address'] = address
        total_sat = currency_to_satoshi(total_cost, 'usd')
        btc_price = satoshi_to_currency(total_sat, 'btc')
        data['btc_total'] = float(btc_price) - float(btc_fee)

        idx = db.fetchone("SELECT idx FROM cart WHERE cid=?", (cid,))[0]
        db.query("UPDATE cart SET payment_status=? WHERE idx=? AND cid=?", ('btc', idx, cid))

        bestchange_url = 'https://www.bestchange.ru/'

        await message.answer(f'''{answer}
    
–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ c —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∫–∏–¥–∫–∏: <b>{total_cost}$</b> –∏–ª–∏ <b>{round(data['btc_total'], 7)} BTC.</b>
–î–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–æ–≤–Ω–æ —Ç–∞–∫—É—é –∂–µ —Å—É–º–º—É –Ω–∞ –∞–¥—Ä–µ—Å: 
<b>{address}</b>

–°–ø–∏—Å–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏ –≤—ã–≥–æ–¥–Ω—ã—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç—É—Ç: <u>{bestchange_url}</u>''', reply_markup=pay_markup)
        await CheckoutState.check_cart.set()


# KUNA –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´ #


@dp.message_handler(IsUser(), text='üì© KUNA Code', state=CheckoutState.payment_status)
async def kuna_payment(message: Message, state: FSMContext):
    cid = message.chat.id
    idx = db.fetchone("SELECT idx FROM cart WHERE cid=?", (cid,))[0]
    db.query("UPDATE cart SET payment_status=? WHERE idx=? AND cid=?", ('kuna', idx, cid))
    async with state.proxy() as data:
        if data.get('total_price') is None:
            if 'products' in data.keys():
                answer = ''
                total_price = 0

                for title, price, count_in_cart, _ in data['products'].values():
                    tp = count_in_cart * price
                    answer += f'<b>{title}</b> * {count_in_cart} —à—Ç. = <b>{tp}$</b>'
                    total_price += tp

                data['products'][idx].append(total_price)
                data['products'][idx].append(answer)
                total_cost = total_price
        else:
            total_cost = data['total_price'][cid][4]
            answer = data['total_price'][cid][2]

        await message.answer(f'''{answer}
–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ c —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∫–∏–¥–∫–∏: <b>{total_cost}$</b>.
–î–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å KUNA Code —Ä–æ–≤–Ω–æ –Ω–∞ —Ç–∞–∫—É—é –∂–µ —Å—É–º–º—É.
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–ø–∏—à–∏—Ç–µ –∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".''', reply_markup=pay_markup)
        await CheckoutState.check_cart.set()


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.check_cart)
async def process_check_kuna_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await pay_order_process(message)


@dp.message_handler(IsUser(), text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', state=CheckoutState.check_cart)
async def process_checkout(message: Message, state: FSMContext):
    cid = message.chat.id
    idx = db.fetchone("SELECT idx FROM cart WHERE cid=?", (cid,))[0]
    payment_status = db.fetchone("SELECT payment_status FROM cart WHERE cid=? AND idx=?", (cid, idx))[0]
    if payment_status == 'paid':
        post_markup = ReplyKeyboardMarkup()
        post_markup.row('üá∫üá¶ –£–∫—Ä–ü–æ—á—Ç–∞', 'üåÄ Justin')
        post_markup.row('üìÆ –ù–æ–≤–∞—è –ü–æ—á—Ç–∞')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏!', reply_markup=post_markup)
        await CheckoutState.post_kind.set()

    if payment_status == 'btc':
        async with state.proxy() as data:
            btc_total = data['btc_total']
        payment = await check_payment(btc_total)

        if payment:
            payment_status = 'paid'
            db.query("UPDATE cart SET payment_status=? WHERE cid=? AND idx=?", (payment_status, cid, idx))
            post_markup = ReplyKeyboardMarkup()
            post_markup.row('üá∫üá¶ –£–∫—Ä–ü–æ—á—Ç–∞', 'üåÄ Justin')
            post_markup.row('üìÆ –ù–æ–≤–∞—è –ü–æ—á—Ç–∞')
            await message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏!', reply_markup=post_markup)
            await CheckoutState.post_kind.set()
        else:
            await message.answer('‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∞ –Ω–∞ —Å—á—ë—Ç –∏–ª–∏ –æ–Ω–∞ –º–µ–Ω—å—à–µ, —á–µ–º —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞.',
                                 reply_markup=pay_markup)
    if payment_status == 'kuna':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ KUNA-–∫–æ–¥.')
        await KunaState.code.set()


@dp.message_handler(IsUser(), text=back_message, state=KunaState.code)
async def process_check_pay_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await pay_order_process(message)


@dp.message_handler(IsUser(), state=KunaState.code)
async def check_kuna_proccess(message: Message, state: FSMContext):
    code = message.text
    cid = message.chat.id
    idx = db.fetchone("SELECT idx FROM cart WHERE cid=?", (cid,))[0]
    async with state.proxy() as data:
        if 'total_cost' in data.keys():
            total_cost = data['total_cost'][cid][4]
            answer = data['total_cost'][cid][2]

        else:
            total_cost = data['products'][idx][4]
            answer = data['products'][idx][5]

    payment = check_payment_code(total_cost, code, cid)
    if payment is True:
        payment_status = 'paid'
        db.query("UPDATE cart SET payment_status=? WHERE cid=? AND idx=?", (payment_status, cid, idx))
        post_markup = ReplyKeyboardMarkup()
        post_markup.row('üá∫üá¶ –£–∫—Ä–ü–æ—á—Ç–∞', 'üåÄ Justin')
        post_markup.row('üìÆ –ù–æ–≤–∞—è –ü–æ—á—Ç–∞')
        await message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏!', reply_markup=post_markup)
        await CheckoutState.post_kind.set()
    if payment == 404:
        await message.answer('‚ùå –¢–∞–∫–æ–π KUNA Code –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', reply_markup=back_markup())
    if payment is False:
        await message.answer('‚ùå –≠—Ç–æ—Ç KUNA Code –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', reply_markup=back_markup())


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.post_kind)
async def process_kuna_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await pay_order_process(message)


@dp.message_handler(IsUser(), text='üá∫üá¶ –£–∫—Ä–ü–æ—á—Ç–∞', state=CheckoutState.post_kind)
async def process_ukrpost_delivery(message: Message, state: FSMContext):
    post_kind = 'ukrpost'
    async with state.proxy() as data:
        data['post_kind'] = post_kind
    await CheckoutState.address.set()
    ukrpost_markup = ReplyKeyboardMarkup()
    ukrpost_markup.row(back_message)
    await message.answer('''–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
üî∏ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
üî∏ –§–ò–û
üî∏ –ì–æ—Ä–æ–¥, –Ω–æ–º–µ—Ä/–∏–Ω–¥–µ–∫—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –£–∫—Ä–ø–æ—á—Ç—ã''', reply_markup=ukrpost_markup)


@dp.message_handler(IsUser(), text='üåÄ Justin', state=CheckoutState.post_kind)
async def process_justin_delivery(message: Message, state: FSMContext):
    post_kind = 'justin'
    async with state.proxy() as data:
        data['post_kind'] = post_kind
    await CheckoutState.address.set()

    justin_markup = ReplyKeyboardMarkup()
    justin_markup.row(back_message)
    await message.answer('''–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
üî∏ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
üî∏ –§–ò–û
üî∏ –ì–æ—Ä–æ–¥, –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è Justin''', reply_markup=justin_markup)


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.address)
async def process_check_cart_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await process_checkout(message, state)


@dp.message_handler(IsUser(), text='üìÆ –ù–æ–≤–∞—è –ü–æ—á—Ç–∞', state=CheckoutState.post_kind)
async def newpost_delivery(message: Message, state: FSMContext):
    newpost_markup = ReplyKeyboardMarkup()
    newpost_markup.row(back_message, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ù–ü')
    await message.answer('''–ú—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
—É—Å–ª—É–≥–∞–º–∏ –ù–æ–≤–æ–π –ø–æ—á—Ç—ã, –¥–ª—è –í–∞—à–µ–π –∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –î–µ–ª–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –ù–æ–≤—É—é –ü–æ—á—Ç—É, 
–º—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ª—é–±—ã–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å!''', reply_markup=newpost_markup)
    await NewPostState.submit.set()


@dp.message_handler(IsUser(), text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ù–ü', state=NewPostState.submit)
async def process_newpost_delivery(message: Message, state: FSMContext):
    post_kind = 'newpost'
    async with state.proxy() as data:
        data['post_kind'] = post_kind
    await CheckoutState.address.set()

    new_post_markup = ReplyKeyboardMarkup()
    new_post_markup.add(back_message)
    await message.answer('''–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    üî∏ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    üî∏ –§–ò–û
    üî∏ –ì–æ—Ä–æ–¥, –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ù–ü''', reply_markup=new_post_markup)


@dp.message_handler(IsUser(), text=back_message, state=NewPostState.submit)
async def process_new_post_back(message: Message, state: FSMContext):
    if message.text == back_message:
        await process_checkout(message, state)


@dp.message_handler(IsUser(), state=CheckoutState.address)
async def process_info(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
        data['ttn'] = 0
        await confirm(message)
        await CheckoutState.confirm.set()


async def confirm(message):
    await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.',
                         reply_markup=confirm_markup())


# @dp.message_handler(IsUser(), lambda message: message.text not in [confirm_message, back_message],
#                     state=CheckoutState.confirm)
# async def process_confirm_invalid(message: Message):
#     await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.confirm)
async def process_confirm_back(message: Message, state: FSMContext):
    await CheckoutState.address.set()

    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å <b>' + data['address'] + '</b>?',
                             reply_markup=back_markup())


@dp.message_handler(IsUser(), text=confirm_message, state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    async with state.proxy() as data:
        post_kind = data['post_kind']
        total_price = data['total_price']
        order_cb = CallbackData('order', 'id', 'action')
        cid = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name

        if 'products' not in data.keys():
            await process_cart(message, state)
        else:
            products = [f'{title.capitalize()} ‚Äî {str(count_in_cart)}'
                        for title, _, count_in_cart, _, in data['products'].values()]
            order_id = md5(''.join([str(cid), data['address'], ' —à—Ç.'.join(products)]).encode('utf-8')).hexdigest()
            db.query('INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?, ?)',
                     (cid, username, order_id, data['address'], data['ttn'], ''.join(products), post_kind))
            referred = db.fetchone('SELECT referred FROM users WHERE cid=?', (cid,))[0]
            referral = db.fetchone('SELECT * FROM referral WHERE username=?', (referred,))
            if referral is not None:
                ref_buyer = json.loads(referral[2])
                if cid not in ref_buyer:
                    ref_buyer.append(cid)
                db.query('UPDATE referral SET ref_buyers=? WHERE username=?', (json.dumps(ref_buyer), referral[0]))
                percent = (total_price / 100) * 3
                bonus = db.fetchone('SELECT bonus FROM referral WHERE username=?', (referral[0],))[0] + percent
                db.query('UPDATE referral SET bonus=? WHERE username=?', (bonus, referral[0]))

            buyer = db.fetchone('SELECT * FROM buyers WHERE cid=?', (cid,))
            if buyer is None:
                db.query('INSERT INTO buyers VALUES (?, ?, ?)', (cid, username, first_name))
            if post_kind == 'ukrpost':
                post_kind = 'üá∫üá¶ –£–∫—Ä–ø–æ—á—Ç–∞'
            if post_kind == 'justin':
                post_kind = 'üåÄ Justin'
            if post_kind == 'newpost':
                post_kind = 'üìÆ –ù–æ–≤–∞—è –ü–æ—á—Ç–∞'

            db.query('DELETE FROM cart WHERE cid=?', (cid,))

            address = data['address'].split('\n')
            if len(products) > 1:
                product = ' —à—Ç.\n'.join(products)
            else:
                product = f'{"".join(products)} —à—Ç.'

                text = f'''–¢–µ–ª–µ—Ñ–æ–Ω: <b>{address[0]}</b>
<b>–§–ò–û:</b> {address[1]}</b>
<b>–Æ–∑–µ—Ä–Ω—ç–π–º:</b> @{username}</b>
–ì–æ—Ä–æ–¥/–ø–æ—á—Ç–∞:</b> {address[2]}</b>
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {post_kind}</b>
–ó–∞–∫–∞–∑:
<b>{product}</b>'''

            await message.answer(
                f'''–û–∫! –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏ üöÄ
–¢–µ–ª–µ—Ñ–æ–Ω: <b>{address[0]}</b>
–§–ò–û: <b>{address[1]}</b>
–ì–æ—Ä–æ–¥/–ø–æ—á—Ç–∞: <b>{address[2]}</b>
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{post_kind}</b>
–í–∞—à –∑–∞–∫–∞–∑:
<b>{product}</b>''')

            answer_markup = InlineKeyboardMarkup()
            answer_markup.add(
                InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –¢–¢–ù', callback_data=order_cb.new(id=order_id, action='add_ttn')))
            answer_markup.add(
                InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=order_cb.new(id=order_id, action='delete_order')))
            admins = db.fetchall('SELECT cid FROM admins WHERE role=?', ('–ê–¥–º–∏–Ω',))[0]
            couriers = db.fetchall('SELECT cid FROM admins WHERE role=?', ('–ö—É—Ä—å–µ—Ä',))[0]
            if db.fetchone('SELECT channel_id FROM channels WHERE role=?', ('–î–ª—è –∑–∞–∫–∞–∑–æ–≤',)) is None:
                for cid in admins and cid in couriers:
                    await bot.send_message(cid, text=text, reply_markup=answer_markup)
            else:
                channels = db.fetchall('SELECT channel_id FROM channels WHERE role=?', ('–î–ª—è –∑–∞–∫–∞–∑–æ–≤',))[0]
                for channel in channels:
                    await bot.send_message(channel, text)
    await state.finish()


from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from loader import dp, db, bot
from .menu import delivery_status
from filters import IsUser
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
from keyboards.default.markups import *
from states import CheckoutState
order_cb = CallbackData('order', 'id', 'action')

postkind = {'ukrpost': 'üá∫üá¶ –£–∫—Ä–ø–æ—á—Ç–∞', 'justin': 'üåÄ Justin', 'newpost': 'üìÆ –ù–æ–≤–∞—è –ü–æ—á—Ç–∞'}


@dp.message_handler(IsUser(), text=delivery_status)
async def process_delivery_status(message: Message):

    orders = db.fetchall('SELECT * FROM orders WHERE cid=?', (message.chat.id,))

    if len(orders) == 0:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
    else:
        await delivery_status_answer(message, orders)


async def delivery_status_answer(message, orders):

    cid = message.chat.id

    for order in orders:
        ttn = order[4]
        order_id = order[2]

        res = f'–ó–∞–∫–∞–∑ <b>‚Ññ{order_id}</b>'
        answer = [
            ' –ª–µ–∂–∏—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.',
            f' —É–∂–µ –≤ –ø—É—Ç–∏! –û–∂–∏–¥–∞–π—Ç–µ —Å–º—Å-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ—á—Ç—ã. –í–∞—à –¢–¢–ù –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {ttn}',
        ]
        if ttn == 0:
            res += answer[0]
        else:
            res += answer[1]
        res += '\n\n'
        answer_markup = InlineKeyboardMarkup()
        answer_markup.add(InlineKeyboardButton(
            '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=order_cb.new(id=order_id, action='expand')))

        await message.answer(res, reply_markup=answer_markup)


@dp.callback_query_handler(IsUser(), order_cb.filter(action='expand'))
async def process_expand(query: CallbackQuery, callback_data: dict, state: FSMContext):
    async with state.proxy() as data:
        data['order_id'] = callback_data['id']
        orders = db.fetchall('SELECT * FROM orders where order_id=?', (data['order_id'],))

        await query.message.answer('–í–∞—à –∑–∞–∫–∞–∑:\n', reply_markup=back_markup())
        for cid, username, order_id, address, ttn, products, post_kind in orders:
            post_kind = postkind[post_kind]
            address = address.split('\n')
            products = products.split('\n')
            if len(products) > 1:
                product = ' —à—Ç.\n'.join(products)
            else:
                product = f'{"".join(products)} —à—Ç.'

            text = f'''<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {address[0]}
<b>–§–ò–û:</b> {address[1]}
<b>–ì–æ—Ä–æ–¥/–ø–æ—á—Ç–∞:</b> {address[2]}
<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {post_kind}
<b>–¢–¢–ù:</b> {ttn}
<b>–ó–∞–∫–∞–∑:</b>
{product}'''
        await query.message.answer(text, reply_markup=back_markup())

